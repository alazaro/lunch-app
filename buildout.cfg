[buildout]
develop = .
parts =
    mkdirs
    app
    deploy_ini
    deploy_cfg
    debug_ini
    debug_cfg
    test
    test_cfg
    pep8
    pylint
    uwsgi

download-cache = ${buildout:directory}/download-cache


[mkdirs]
recipe = z3c.recipe.mkdir
paths =
    ${buildout:directory}/var/log
    ${buildout:directory}/var/db
    ${buildout:directory}/var/pid


[app]
recipe = zc.recipe.egg
eggs = lunch_app
interpreter = python-console


[uwsgi]
recipe = buildout.recipe.uwsgi
version = 2.0.8
xml-http = 0.0.0.0:8080
xml-master = true
xml-enable-threads = true
xml-single-interpreter = true
xml-pidfile = ${buildout:directory}/var/pid/app.pid
xml-wsgi-file = ${buildout:directory}/src/lunch_app/script.py
xml-static-map = /static=${buildout:directory}/src/lunch_app/static
xml-pythonpath = ${buildout:directory}/src
xml-env = BUILDOUT_DIRECTORY=${buildout:directory}
extra-paths = ${buildout:eggs-directory}/*.egg


[deploy_ini]
recipe = collective.recipe.template
input = etc/deploy.ini.in
output = ${buildout:parts-directory}/etc/${:outfile}
outfile = deploy.ini
app = lunch_app


[debug_ini]
recipe = collective.recipe.template
input = etc/debug.ini.in
output = ${buildout:parts-directory}/etc/${:outfile}
outfile = debug.ini


[deploy_cfg]
recipe = collective.recipe.template
input = inline:
    # Deployment configuration
    DEBUG = False
    SQLALCHEMY_DATABASE_URI = 'postgresql://localhost/lunch_app'
    SOCIAL_AUTH_USER_MODEL = 'lunch_app.models.User'
    SECRET_KEY = 'random-secret-key'
    SESSION_PROTECTION = 'strong'
    SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True
    SOCIAL_AUTH_LOGIN_URL = '/'
    SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
    SOCIAL_AUTH_USER_MODEL = 'lunch_app.models.User'
    SOCIAL_AUTH_AUTHENTICATION_BACKENDS = (
        'social.backends.google.GoogleOAuth2',
        )
    # Keypairs for social auth backends
    SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = ''
    SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = ''

output = ${buildout:parts-directory}/etc/deploy.cfg


[debug_cfg]
recipe = collective.recipe.template
output = ${buildout:parts-directory}/etc/debug.cfg
input = inline:
    # Debugging configuration
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = 'sqlite:///${buildout:directory}/var/db/lunch_app.db'
    SOCIAL_AUTH_USER_MODEL = 'lunch_app.models.User'
    SECRET_KEY = 'random-secret-key'
    SESSION_PROTECTION = 'strong'
    SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True
    SOCIAL_AUTH_LOGIN_URL = '/'
    SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
    SOCIAL_AUTH_USER_MODEL = 'lunch_app.models.User'
    SOCIAL_AUTH_AUTHENTICATION_BACKENDS = (
        'social.backends.google.GoogleOAuth2',
        )
    # Keypairs for social auth backends
    SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '289117512003-hu16qdvc404ec04vm2ufofe2mnmqh8vu.apps.googleusercontent.com'
    SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'e5iEEDC_ag9Kgb4Q1r_qZEMn'
    SOCIAL_AUTH_REDIRECT_IS_HTTPS = False


[test_cfg]
recipe = collective.recipe.template
output = ${buildout:parts-directory}/etc/test.cfg
input = inline:
    # Debugging configuration
    DEBUG = True
    TESTING = True
    SQLALCHEMY_DATABASE_URI = 'sqlite://'
    SOCIAL_AUTH_USER_MODEL = 'lunch_app.models.User'
    SECRET_KEY = 'random-secret-key'
    SESSION_PROTECTION = 'strong'
    SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True
    SOCIAL_AUTH_LOGIN_URL = '/'
    SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
    SOCIAL_AUTH_USER_MODEL = 'lunch_app.models.User'
    SOCIAL_AUTH_AUTHENTICATION_BACKENDS = (
        'social.backends.google.GoogleOAuth2',
        )
    # Keypairs for social auth backends
    SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '289117512003-hu16qdvc404ec04vm2ufofe2mnmqh8vu.apps.googleusercontent.com'
    SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'e5iEEDC_ag9Kgb4Q1r_qZEMn'
    SOCIAL_AUTH_REDIRECT_IS_HTTPS = False





[test]
recipe = pbp.recipe.noserunner
eggs = lunch_app
defaults = -v


[pep8]
recipe = zc.recipe.egg
eggs = pep8
entry-points = pep8check=pep8:_main
dirs = ['${buildout:directory}/src/lunch_app']
scripts = pep8
initialization = sys.argv.extend(${pep8:dirs})


[pylint]
recipe = zc.recipe.egg
eggs =
    pylint
    lunch_app
scripts = pylint
entry-points = pylint=pylint.lint:Run
dirs = ['${buildout:directory}/src/lunch_app']
initialization =
    sys.argv.append('--rcfile=${buildout:directory}/.pylintrc')
    sys.argv.extend(${pylint:dirs})

